import pygame
import random
import math

# Inicialización de Pygame
pygame.init()

# Configuración de pantalla
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("New Rally X")

# Colores
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
BROWN = (139, 69, 19)  # Color para los obstáculos
BORDER_COLOR = (0, 0, 0)  # Color del borde

# Fuente
font = pygame.font.Font(None, 36)

def draw_text(text, x, y, color=BLACK):
    render = font.render(text, True, color)
    screen.blit(render, (x, y))

# Clase Bullet
class Bullet:
    def __init__(self, x, y, angle):
        self.x = x
        self.y = y
        self.speed = 6
        self.angle = angle
        self.rect = pygame.Rect(self.x, self.y, 10, 10)
    
    def move(self):
        if self.angle == 0:  # Mueve a la derecha
            self.x += self.speed
        elif self.angle == 180:  # Mueve a la izquierda
            self.x -= self.speed
        elif self.angle == 270:  # Mueve hacia arriba
            self.y -= self.speed
        elif self.angle == 90:  # Mueve hacia abajo
            self.y += self.speed
        self.rect.topleft = (self.x, self.y)
    
    def draw(self):
        pygame.draw.rect(screen, YELLOW, self.rect)

# Clase Player
class Player:
    def __init__(self):
        self.x = 100
        self.y = 100
        self.speed = 4
        self.rect = pygame.Rect(self.x, self.y, 40, 40)
        self.defending = False
        # Cargar la imagen del jugador
        try:
            self.image = pygame.image.load("player1.jpg") 
            self.image = pygame.transform.scale(self.image, (40, 40))  # Escalar la imagen
        except pygame.error:
            print("No se pudo cargar la imagen 'player1.jpg'. Usando un color de fondo.")
            self.image = pygame.Surface((40, 40))  # Superficie de reemplazo
            self.image.fill(RED)
        self.angle = 0  # Ángulo de rotación inicial
        self.bullets = []  # Lista de balas
        self.can_shoot = True  # Para evitar disparos continuos

    def move(self, keys, obstacles):
        original_x, original_y = self.x, self.y

        if keys[pygame.K_LEFT]:
            self.x -= self.speed
            self.angle = 180  # Mira hacia la izquierda
        if keys[pygame.K_RIGHT]:
            self.x += self.speed
            self.angle = 0  # Mira hacia la derecha
        if keys[pygame.K_UP]:
            self.y -= self.speed
            self.angle = 270  # Mira hacia arriba
        if keys[pygame.K_DOWN]:
            self.y += self.speed
            self.angle = 90  # Mira hacia abajo

        self.rect.topleft = (self.x, self.y)

        # Verificar colisiones con los obstáculos
        for obstacle in obstacles:
            if self.rect.colliderect(obstacle):
                self.x, self.y = original_x, original_y  # Restaurar posición si hay colisión
                self.rect.topleft = (self.x, self.y)
                break

    def draw(self):
        # Rotamos la imagen según el ángulo
        rotated_image = pygame.transform.rotate(self.image, self.angle)
        rotated_rect = rotated_image.get_rect(center=self.rect.center)  # Ajustamos el rectángulo de la imagen para que se dibujue correctamente
        screen.blit(rotated_image, rotated_rect.topleft)  # Dibujamos la imagen rotada

        # Dibujar las balas
        for bullet in self.bullets:
            bullet.move()
            bullet.draw()
            if bullet.x > WIDTH or bullet.x < 0 or bullet.y < 0 or bullet.y > HEIGHT:
                self.bullets.remove(bullet)

    def shoot(self):
        # Solo disparar cuando el jugador presiona la tecla de espacio
        self.bullets.append(Bullet(self.x + 40, self.y + 15, self.angle))  # Crear la bala según la dirección del jugador

# Clase Enemy con persecución activa
class Enemy:
    def __init__(self, x, y, detection_range=200):  # Añadido parámetro de rango de detección
        self.x = x
        self.y = y
        self.speed = 3  # Aumenté la velocidad a 3
        self.rect = pygame.Rect(self.x, self.y, 70, 70)
        self.detection_range = detection_range  # Rango de detección del enemigo
        
        # Cargar la imagen del enemigo
        try:
            self.image = pygame.image.load("enemigos.png")  # Usamos 'enemigos.png'
            self.image = pygame.transform.scale(self.image, (70, 70))  # Escalamos la imagen si es necesario
        except pygame.error:
            print("No se pudo cargar la imagen 'enemigos.png'. Usando un color de fondo.")
            self.image = pygame.Surface((70, 70))  # Superficie de reemplazo en caso de error
            self.image.fill(BLUE)

    def move_towards(self, target, obstacles):
        # Calcular la distancia y comprobar si está dentro del rango de detección
        dx = target.x - self.x
        dy = target.y - self.y
        distance = math.sqrt(dx**2 + dy**2)
        
        if distance <= self.detection_range:  # Si el jugador está dentro del rango de detección
            # Normalizar la dirección
            if distance != 0:
                dx /= distance
                dy /= distance

            # Moverse hacia el jugador
            self.x += dx * self.speed
            self.y += dy * self.speed

            self.rect.topleft = (self.x, self.y)

            # Verificar colisiones con los obstáculos y cambiar dirección si colide
            for obstacle in obstacles:
                if self.rect.colliderect(obstacle):
                    # Si colide con un obstáculo, moverse en dirección opuesta
                    self.x -= dx * self.speed
                    self.y -= dy * self.speed
                    self.rect.topleft = (self.x, self.y)  # Restaurar posición si hay colisión

    def attack(self, target):
        if self.rect.colliderect(target.rect) and not target.defending:
            return True
        return False

    def draw(self):
        # Dibuja la imagen del enemigo
        screen.blit(self.image, self.rect.topleft)

def main_menu():
    menu_running = True
    while menu_running:
        screen.fill(WHITE)
        draw_text("1. Empezar Juego", 300, 200)
        draw_text("2. Sonido", 300, 250)
        draw_text("3. Salir", 300, 300)
        pygame.display.flip()
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_1:
                    return "start"
                if event.key == pygame.K_2:
                    return "pause"
                if event.key == pygame.K_3:
                    pygame.quit()
                    exit()

def game_loop():
    ticking = True
    clock = pygame.time.Clock()
    
    # Definir la meta (meta de destino)
    goal_rect = pygame.Rect(WIDTH - 100, HEIGHT - 100, 50, 50)  # Rectángulo de la meta en la esquina inferior derecha
    
    # Definir los obstáculos como parte de la pista
    obstacles = [
        pygame.Rect(200, 150, 400, 20),  # Parte superior de la pista
        pygame.Rect(200, 400, 400, 20),  # Parte inferior de la pista
        pygame.Rect(100, 150, 20, 250),  # Pared izquierda
        pygame.Rect(700, 150, 20, 250),  # Pared derecha
        pygame.Rect(300, 250, 200, 20),  # Parte central de la pista
    ]
    
    # Borde alrededor de la pista
    border_rects = [
        pygame.Rect(0, 0, WIDTH, 20),  # Parte superior
        pygame.Rect(0, HEIGHT - 20, WIDTH, 20),  # Parte inferior
        pygame.Rect(0, 0, 20, HEIGHT),  # Parte izquierda
        pygame.Rect(WIDTH - 20, 0, 20, HEIGHT)  # Parte derecha
    ]
    
    while ticking:
        state = main_menu()
        paused = False
        game_over = False
        win = False
        player = Player()
        
        # Colocar enemigos en diferentes posiciones dentro de la pista
        enemies = [
            Enemy(250, 100),  # Enemigo dentro de la pista
            Enemy(550, 200),  # Otro enemigo dentro de la pista
            Enemy(350, 420),  # Otro enemigo dentro de la pista
            Enemy(400, 300),  # Nuevo enemigo añadido
        ]
        
        while state == "start" and not game_over and not win:
            screen.fill(WHITE)
            keys = pygame.key.get_pressed()
            player.move(keys, obstacles)
            
            # Si se presiona la tecla de espacio, disparar
            if keys[pygame.K_SPACE]:
                player.shoot()

            player.draw()

            # Mover enemigos hacia el jugador y atacar si es posible
            for enemy in enemies[:]:
                enemy.move_towards(player, obstacles)  # Los enemigos siguen al jugador
                enemy.draw()
                if enemy.attack(player):
                    game_over = True
                
                for bullet in player.bullets[:]:
                    if bullet.rect.colliderect(enemy.rect):
                        enemies.remove(enemy)
                        player.bullets.remove(bullet)
                        break
            
            # Comprobar si el jugador llega a la meta
            if player.rect.colliderect(goal_rect):
                win = True
            
            # Dibujar la meta
            pygame.draw.rect(screen, GREEN, goal_rect)  

            # Dibujar obstáculos (las paredes de la pista)
            for obstacle in obstacles:
                pygame.draw.rect(screen, BROWN, obstacle)

            # Dibujar borde de la pista
            for border in border_rects:
                pygame.draw.rect(screen, BORDER_COLOR, border)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    ticking = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_2:
                        paused = not paused
                    if event.key == pygame.K_3:
                        ticking = False
            
            if paused:
                draw_text("PAUSE", WIDTH // 2 - 50, HEIGHT // 2, BLACK)
                pygame.display.flip()
                while paused:
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            ticking = False
                            paused = False
                        if event.type == pygame.KEYDOWN and event.key == pygame.K_2:
                            paused = False
                    pygame.time.delay(100)
            else:
                pygame.display.flip()
                clock.tick(30)
        
        if game_over:
            screen.fill(WHITE)
            draw_text("GAME OVER", WIDTH // 2 - 80, HEIGHT // 2, RED)
            pygame.display.flip()
            pygame.time.delay(2000)
        
        if win:
            screen.fill(WHITE)
            draw_text("YOU WIN!", WIDTH // 2 - 80, HEIGHT // 2, GREEN)
            pygame.display.flip()
            pygame.time.delay(2000)

    pygame.quit()

# Iniciar el juego
game_loop()
